Exercises: Level 1

    What is conditional rendering?
    How do you implement conditional rendering?
    Which method of conditional rendering do you prefer to use?

Exercises: Level 2

    Make a single page application which changes the body of the background based on the season of the year(Autumn, Winter, Spring, Summer)
    Make a single page application which change the body of the background based on the time of the day(Morning, Noon, Evening, Night)

Exercises: Level 3

    Fetching data takes some amount of time. A user has to wait until the data get loaded. Implement a loading functionality of a data is not fetched yet. You can simulate the delay using setTimeout.

Exercícios: Nível 1

    O que é renderização condicional?
    Renderização condicional no React é o processo de renderizar diferentes componentes ou elementos com base em determinadas condições. Isso permite mostrar ou esconder partes da interface de acordo com o estado ou dados disponíveis.

    Como você implementa renderização condicional?
    A renderização condicional pode ser implementada usando estruturas de controle, como if, else, ternário ou métodos como && para decidir quais elementos ou componentes devem ser renderizados com base em uma condição.

javascript

class MeuComponente extends React.Component {
  render() {
    const estaLogado = this.props.estaLogado;
    return (
      <div>
        {estaLogado ? <ComponenteLogado /> : <ComponenteNaoLogado />}
      </div>
    );
  }
}

    Qual método de renderização condicional você prefere usar?
    A escolha do método depende do contexto e da simplicidade da condição. O operador ternário é bastante popular devido à sua concisão, mas às vezes estruturas if podem ser mais legíveis para lógicas complexas.

Exercícios: Nível 2
Mudança de Fundo com Base na Estação do Ano:

javascript

import React, { Component } from 'react';

class MudarFundoEstacao extends Component {
  constructor(props) {
    super(props);
    this.state = {
      estacao: this.detectarEstacao(),
    };
  }

  detectarEstacao() {
    // Lógica para detectar a estação do ano com base na data atual
    // Implementação simplificada para exemplo
    const data = new Date();
    const mes = data.getMonth() + 1;
    if (mes >= 3 && mes <= 5) return 'Primavera';
    else if (mes >= 6 && mes <= 8) return 'Verão';
    else if (mes >= 9 && mes <= 11) return 'Outono';
    else return 'Inverno';
  }

  render() {
    const { estacao } = this.state;
    let corFundo = '';

    switch (estacao) {
      case 'Primavera':
        corFundo = '#b3ff66';
        break;
      case 'Verão':
        corFundo = '#ffcc66';
        break;
      case 'Outono':
        corFundo = '#ff9900';
        break;
      case 'Inverno':
        corFundo = '#80b3ff';
        break;
      default:
        corFundo = '#fff';
    }

    const estiloFundo = {
      backgroundColor: corFundo,
      height: '100vh',
    };

    return <div style={estiloFundo}>Página com base na Estação do Ano</div>;
  }
}

export default MudarFundoEstacao;

Mudança de Fundo com Base no Horário do Dia:

javascript

// Implementação similar ao exemplo acima, mas detectando o horário do dia
// e alterando o fundo de acordo com "Manhã", "Tarde", "Noite", "Madrugada"

Exercícios: Nível 3
Funcionalidade de Carregamento:

javascript

import React, { Component } from 'react';

class Dados extends Component {
  constructor(props) {
    super(props);
    this.state = {
      dadosCarregados: false,
      dados: null,
    };
  }

  componentDidMount() {
    // Simulação de carregamento de dados com um atraso de 2 segundos
    setTimeout(() => {
      // Aqui você faria a chamada real para buscar dados
      // Por agora, vamos apenas simular e definir os dados para mostrar que foram carregados
      const dados = 'Dados carregados!';
      this.setState({ dadosCarregados: true, dados });
    }, 2000);
  }

  render() {
    const { dadosCarregados, dados } = this.state;

    return (
      <div>
        {!dadosCarregados ? (
          <p>Carregando...</p>
        ) : (
          <div>
            <h1>Dados Carregados</h1>
            <p>{dados}</p>
          </div>
        )}
      </div>
    );
  }
}

export default Dados;

Este exemplo demonstra uma funcionalidade de carregamento que exibe "Carregando..." por dois segundos antes de mostrar os dados simulados. Durante esse tempo, os usuários veem um indicador de carregamento até que os dados sejam exibidos.